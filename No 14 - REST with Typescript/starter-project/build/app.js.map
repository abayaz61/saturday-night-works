{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app.ts","webpack:///./controllers/default_controller.ts","webpack:///./controllers/quote_controller.ts","webpack:///./guards/dataValidatorGuard.ts","webpack:///./index.ts","webpack:///./models/quote.ts","webpack:///./routes.ts","webpack:///./services/quote_service.ts","webpack:///external \"class-validator\"","webpack:///external \"fortjs\"","webpack:///external \"path\""],"names":[],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { Fort } from 'fortjs';\nimport { routes } from './routes';\nimport * as path from \"path\";\n\nexport class App extends Fort {\n    constructor() {\n        super();\n        this.routes = routes;\n    }\n}\n\n","import { Controller, DefaultWorker, textResult, viewResult } from \"fortjs\";\n\nexport class DefaultController extends Controller {\n    @DefaultWorker()\n    async default() {\n        try {\n            const data = {\n                title: 'FortJs'\n            };\n            const result = await viewResult('default/index.html', data);\n            return result;\n        } catch (ex) {\n            // handle exception and show user a good message.\n            // save this ex in a file or db, so that you can know what's the issue and where\n            const result = await textResult(`Our server is busy right now. Please try later.`);\n            return result;\n        }\n    }\n}","import { Controller, DefaultWorker, jsonResult, HTTP_STATUS_CODE, HTTP_METHOD, Worker, Route, Guards } from 'fortjs'\nimport { QuoteService } from '../services/quote_service';\nimport { DataValidatorGuard } from '../guards/dataValidatorGuard';\n\nexport class QuoteController extends Controller {\n\n    service = new QuoteService(); // CRUD operasyonlarını üstlenen servis nesnemizi örnekledik\n\n    /*\n    @DefaultWorker()\n    async default() {\n        var result = {\n            \"quotes\":\n                [\n                    { \"quote\": { \"id\": 1, \"text\": \"Kontrolsüz güç güç değildir\" } },\n                    { \"quote\": { \"id\": 2, \"text\": \"Ali veli 49 50\" } },\n                    { \"quote\": { \"id\": 3, \"text\": \"Ak akçe karagün içindir\" } },\n                ]\n        };\n        return jsonResult(result, HTTP_STATUS_CODE.Ok);\n    }\n    */\n    // HTTP Post'a hizmet edecen Worker metodumuz\n    @Worker([HTTP_METHOD.Post])\n    @Route(\"/\") // adres bildirimi. Yani http://localhost:4000/quote \n    @Guards([DataValidatorGuard]) // body ile gelen verinin kontrolünü devrettiğimiz Guard nesne bildirimi\n    async createQuote() {\n        // body'den gelen alanlara bakılarak payload elde edildi\n        const payload = {\n            id: this.body.id,\n            text: this.body.text,\n            available: this.body.available,\n            owner: this.body.owner\n        }\n        // servisimizin ilgili metodunu çağırarak quote nesnesini diziye eklettik\n        const newQuote = this.service.createQuote(payload);\n        // geriye oluşturulan quote içeriğini(id'de barındırır) ve HTTP 201 kodunu gönderdik\n        return jsonResult(newQuote, HTTP_STATUS_CODE.Created);\n    }\n\n    // Silme operasyonumuz HTTP Delete metoduna cevap verecek\n    @Worker([HTTP_METHOD.Delete])\n    @Route(\"/{id}\") // QueryString parametresi olarak gelen id değeri\n    async deleteQuote() {\n        const id = Number(this.param.id);\n        const q = this.service.getQuoteById(id);\n        if (q != null) {\n            this.service.deleteQuote(id);\n            return jsonResult(\"Silindi\", HTTP_STATUS_CODE.Ok);\n        }\n        else {\n            return jsonResult(\"Bulunamadığı için silinemedi\", HTTP_STATUS_CODE.NotFound);\n        }\n    }\n\n    // Bir özlü sözü güncellemek için kullanılır\n    // HTTP Put taleplerine karşılık verir\n    @Worker([HTTP_METHOD.Put])\n    @Route(\"/\") // yönlendirme adresi yine http://localhost:4000/quote şeklinde\n    async updateQuote() {\n        console.log(this.body);\n        const payload = {\n            id: this.body.id,\n            text: this.body.text,\n            available: this.body.available,\n            owner: this.body.owner\n        }\n        const updatedValue = this.service.updateQuote(payload); // güncellemeyi yap\n        return updatedValue;\n    }\n\n    // varsayılan worker'ımız HTTP Get talepleri sonrası çalışır\n    @DefaultWorker()\n    async getQuoteList() {\n        return jsonResult(this.service.getAllQuotes()); // Sonuçları json formatında gönderdik\n    }\n\n    // HTTP Get ve querystring'teki id değerine göre quote döner\n    @Worker([HTTP_METHOD.Get])\n    @Route(\"/{id}\")\n    async getQuoteById() {\n        const id = Number(this.param.id); // querystring id değerini al\n        const q = this.service.getQuoteById(id); // servis metodunu çağır\n        if (q == null) {\n            return jsonResult(\"Bulamadım :(\", HTTP_STATUS_CODE.NotFound);\n        }\n        return jsonResult(q, HTTP_STATUS_CODE.Ok);\n    }\n\n    //TODO: Belli bir yazara göre özlü sözleri listeleyen metod denenebilir\n\n}","import {Guard,HttpResult, MIME_TYPE, HTTP_STATUS_CODE} from \"fortjs\";\nimport {Quote} from \"../models/quote\";\n\n// Guard türevli kendi dekoratör sınıfımız\n// Görevi Quote verilerinin içeriklerini kontrol etmek\nexport class DataValidatorGuard extends Guard{\n    // check, Guard sınıfından gelen ve ezilmek zorunda olan metodumuz. Kontrol işlemini üstlenecek\n    async check(){\n        const quote:Quote=new Quote(this.body);\n\n        // Test amaçlı olarak null dönüyoruz ancak burada veri kontrolü yapılabilir.\n        // Örneğin gelen verinin formatı uygun mu?\n        // Uygunsa veri içeriğine ait özlü söz kütüphanemizde var mı?\n        // Ya da sadece id'nin repository'de olup olmaması gibi basit bir kontrol konulabilir\n        // Guard nesneleri attribute şeklinde kullanıldıklarından çeşitlendirilebilirler\n\n        return null;\n        // Eğer bir veri ihlali varsa aşağıdaki gibi BadRequest mesajı döndürebiliriz\n\n        /*\n        return {\n            contentType: MIME_TYPE.Text,\n            statusCode: HTTP_STATUS_CODE.BadRequest,\n            responseData: \"Veri doğrulamada sorun\"\n        } as HttpResult;\n        */\n    }\n}","import { App } from \"./app\";\nimport * as path from \"path\";\n\nconst app = new App();\napp.create({\n    folders: [{\n        alias: \"/\",\n        path: path.join(__dirname, \"../static\")\n    }]\n}).then(() => {\n    console.log(\"Your fort is located at address - localhost:4000\");\n});","import { Length, IsIn } from \"class-validator\";\nexport class Quote {\n    id?: number;\n\n    @Length(100)\n    text?: string; // en fazla 100 karakter uzunluğunda bir string değişke\n\n    @Length(100)\n    owner?: string;\n\n    @IsIn([\"yes\", \"no\"]) //seçenekleri evet veya hayır olabilen string bir değişken\n    available: string;\n\n    constructor(quote: any) {\n        this.id = Number(quote.id);\n        this.text = quote.name;\n        this.available = quote.gender;\n        this.owner=quote.owner;\n    }\n}","import { DefaultController } from \"./controllers/default_controller\";\nimport { QuoteController } from \"./controllers/quote_controller\";\n\nexport const routes = [{\n    path: \"*\",\n    controller: DefaultController\n}, {\n    path: \"/quote\",\n    controller: QuoteController\n}];","import { Quote } from \"../models/quote\"; // modeli import ettik\n\n// Quote nesnelerinden oluşan diziyi barındıracak bir sözleşme tanımlıyoruz\ninterface ILibrary {\n    quotes: Quote[];\n}\n\nconst library: ILibrary = {\n    quotes: []\n}\n\n// Servis sınıfımız temel CRUD operasyonlarını içermekte\nexport class QuoteService {\n    // yeni bir quote nesnesi ekler\n    createQuote(quote: Quote) {\n        library.quotes.push(quote);\n        return quote;\n    }\n\n    // gelen quote bilgisine bakarak güncelleme yapar\n    updateQuote(quote: Quote) {\n        // gelen quote nesnesindeki id değerini kullanarak kaydı bul\n        const current = library.quotes.find(q => q.id === quote.id);\n        if (current != null) { //kayıt varsa alanlarını güncelle\n            current.id=quote.id;\n            current.text = quote.text;\n            current.owner = quote.owner;\n            current.available = quote.available;\n            return current;\n        }\n        else\n            return quote;\n    }\n\n    // id değerine göre silme işlemini yapar\n    deleteQuote(id:number) {\n        const currentID=library.quotes.findIndex(q=>q.id===id); // id üzerinden kaydın indeksini bul\n        library.quotes.splice(currentID,1); // index'in bulunduğu yerden itibaren 1 kayıt sil\n    }\n\n    // id değerine göre quote'ı bulur\n    getQuoteById(id: number) {\n        const current=library.quotes.find(q=>q.id===id);\n        return current;\n    }\n\n    // tüm özlü sözleri döndürür\n    getAllQuotes() {\n        return library.quotes;\n    }\n}","module.exports = require(\"class-validator\");","module.exports = require(\"fortjs\");","module.exports = require(\"path\");"],"sourceRoot":""}